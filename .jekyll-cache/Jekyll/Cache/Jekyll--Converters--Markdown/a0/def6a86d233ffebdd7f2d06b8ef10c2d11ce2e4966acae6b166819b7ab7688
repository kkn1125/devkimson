I"r]<h1 id="form-valid">form valid</h1>

<blockquote>
  <p>이 포스팅은 참고용으로 만들어졌기 때문에 정확한 내용은 공식 홈페이지의 docs와 reference를 참고하는 것을 적극 권장합니다.</p>
</blockquote>

<h2 id="form-valid-제어">form valid 제어</h2>

<p>처음 <code class="language-plaintext highlighter-rouge">ModelForm</code>을 접했을 때는 무슨 개념인지조차 몰랐는데 현재는 <code class="language-plaintext highlighter-rouge">ModelForm</code>이 아니면 끔찍하다는 생각이 듭니다. 경우에 따라 form에서 field를 따로 떼어 에러처리 하는 등의 작업이 필요하겠지만 지금은 연습 단계이니 field 별 제어하는 내용은 다음에 다루어 볼 예정입니다.</p>

<h3 id="설정">설정</h3>

<p>테스트 할 내용은 로그인 기능이고 ModelForm을 사용해서 기본적인 유효성 검사와 boostrap5를 연결한 유효성검사 입니다. 그리고 add_error로 추가적인 에러 처리 방법을 기록하려하는데 cleaned_data는 ModelForm을 사용한다면 사용할 필요가 없어 다음에 다루도록 하겠습니다.</p>

<h4 id="formsform과-modelform-차이">forms.Form과 ModelForm 차이</h4>

<p>이번 포스팅에 다루지는 않지만 차이점을 짚고 넘어갈 필요가 있을 것 같아 차이점을 이야기하겠습니다.</p>

<p><code class="language-plaintext highlighter-rouge">ModelForm</code>을 사용하는 경우 <code class="language-plaintext highlighter-rouge">cleaned_data</code>를 사용할 필요가 없습니다. 해당 <code class="language-plaintext highlighter-rouge">dict</code>를 사용할 때 <code class="language-plaintext highlighter-rouge">form.save()</code>처럼 이미 일치하고 정리된 데이터가 저장되기 때문입니다.</p>

<p>하지만 <code class="language-plaintext highlighter-rouge">forms.Form</code>의 경우 <code class="language-plaintext highlighter-rouge">cleanded_data</code>를 해당 데이터베이스 위치에 수동으로 일치시켜 인스턴스를 만들어 데이터베이스에 저장시켜야 합니다.</p>

<h5 id="formsform">forms.Form</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="c1"># Form
</span><span class="k">if</span> <span class="n">form</span><span class="p">.</span><span class="n">is_valid</span><span class="p">():</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">()</span>
    <span class="n">user</span><span class="p">.</span><span class="n">username</span> <span class="o">=</span> <span class="n">form</span><span class="p">.</span><span class="n">cleaned_data</span><span class="p">[</span><span class="s">'username'</span><span class="p">]</span>
    <span class="n">user</span><span class="p">.</span><span class="n">save</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h5 id="modelform">ModelForm</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="c1"># ModelForm
</span><span class="k">if</span> <span class="n">form</span><span class="p">.</span><span class="n">is_valid</span><span class="p">():</span>
    <span class="n">form</span><span class="p">.</span><span class="n">save</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="사용">사용</h3>

<p>예시되는 User라는 ModelForm과 Model을 만듭니다. 먼저 <code class="language-plaintext highlighter-rouge">forms.py</code>를 만들고</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="c1"># forms.py
</span>
<span class="kn">from</span> <span class="nn">django.forms</span> <span class="kn">import</span> <span class="n">ModelForm</span><span class="p">,</span> <span class="n">PasswordInput</span><span class="c1">#, ValidationError
</span><span class="kn">from</span> <span class="nn">django</span> <span class="kn">import</span> <span class="n">forms</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">User</span>

<span class="k">class</span> <span class="nc">SignForm</span><span class="p">(</span><span class="n">ModelForm</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">User</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="p">[</span>
            <span class="s">'username'</span><span class="p">,</span> <span class="s">'password'</span>
        <span class="p">]</span>
        <span class="n">widgets</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">'password'</span><span class="p">:</span> <span class="n">PasswordInput</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">'type'</span><span class="p">:</span> <span class="s">'password'</span><span class="p">})</span>
        <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>models.py도 설정합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1"># models.py
</span>
<span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>

<span class="k">class</span> <span class="nc">User</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">num</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">AutoField</span><span class="p">(</span><span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">username</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">password</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>그리고 <code class="language-plaintext highlighter-rouge">views.py</code>에서 <code class="language-plaintext highlighter-rouge">signin</code>이라 하고 설정합니다. <code class="language-plaintext highlighter-rouge">urls.py</code> 설정은 생략하겠습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
</pre></td><td class="rouge-code"><pre><span class="kn">from</span> <span class="nn">rest_framework.decorators</span> <span class="kn">import</span> <span class="n">api_view</span>
<span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span><span class="p">,</span> <span class="n">redirect</span>
<span class="kn">from</span> <span class="nn">.forms</span> <span class="kn">import</span> <span class="n">SignForm</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">User</span>

<span class="c1"># ...
</span><span class="o">@</span><span class="n">api_view</span><span class="p">([</span><span class="s">'GET'</span><span class="p">,</span> <span class="s">'POST'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">signin</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">POST</span>
        <span class="n">sign_form</span> <span class="o">=</span> <span class="n">SignForm</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">sign_form</span><span class="p">.</span><span class="n">is_valid</span><span class="p">():</span>
            <span class="s">""" forms.Form을 사용할 때
            sign_form = SignForm()
            username = sign_form.cleaned_data['username']
            password = sign_form.cleaned_data['password']
            """</span>
            <span class="n">username</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">'username'</span><span class="p">]</span>
            <span class="n">password</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">'password'</span><span class="p">]</span>

            <span class="k">if</span> <span class="s">' '</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">username</span><span class="p">:</span>
                <span class="n">sign_form</span><span class="p">.</span><span class="n">add_error</span><span class="p">(</span><span class="s">'username'</span><span class="p">,</span> <span class="s">'올바른 형식이 아닙니다.'</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">):</span>
                    <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">)</span>

                    <span class="k">if</span> <span class="n">user</span><span class="p">.</span><span class="n">password</span> <span class="o">==</span> <span class="n">password</span><span class="p">:</span>
                        <span class="n">session_user</span> <span class="o">=</span> <span class="p">{}</span>
                        <span class="n">session_user</span><span class="p">[</span><span class="s">'username'</span><span class="p">]</span> <span class="o">=</span> <span class="n">username</span>
                        <span class="n">session_user</span><span class="p">[</span><span class="s">'password'</span><span class="p">]</span> <span class="o">=</span> <span class="n">password</span>
                        <span class="n">request</span><span class="p">.</span><span class="n">session</span><span class="p">[</span><span class="s">'user'</span><span class="p">]</span> <span class="o">=</span> <span class="n">session_user</span>
                        <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">'/'</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">'/signin?error=1'</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">sign_form</span> <span class="o">=</span> <span class="n">SignForm</span><span class="p">()</span>
        
    <span class="n">context</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">'signForm'</span><span class="p">:</span> <span class="n">sign_form</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'todo/signin.html'</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote class="blockquote blockquote-info">
  <p>잘 안되신다면 이것만 주의하면 될 것 같습니다. <code class="language-plaintext highlighter-rouge">sign_form</code>을 <code class="language-plaintext highlighter-rouge">if .. else</code>문 밖에서 <code class="language-plaintext highlighter-rouge">context</code>로 받아 <code class="language-plaintext highlighter-rouge">render</code>로 보내고 있습니다.<br />
위의 코드에서 위치를 보시면 아시겠지만 <code class="language-plaintext highlighter-rouge">sign_form</code>을 <code class="language-plaintext highlighter-rouge">is_valid</code>한 이후에 다시 <code class="language-plaintext highlighter-rouge">sign_form</code>을 재정의하면 당연히 <strong>유효성 검사한 결과를 제대로 전달하지 못합니다</strong>.</p>
</blockquote>

<p>그 다음 <code class="language-plaintext highlighter-rouge">template</code>을 작성해보면 아래와 같습니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre>{% extends './layout.html' %}
{% load bootstrap5 %}
{% block content %}
<span class="nt">&lt;h1&gt;</span>Sign in<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;div&gt;</span>
    <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"{% url 'signin' %}"</span> <span class="na">method=</span><span class="s">"post"</span> <span class="na">novalidate</span><span class="nt">&gt;</span>
        {% if request.GET.error %}
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-danger"</span><span class="nt">&gt;</span>
                아이디와 비밀번호를 확인해주세요
            <span class="nt">&lt;/div&gt;</span>
        {% endif %}
        {% if signForm.errors %}
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"alert alert-danger"</span><span class="nt">&gt;</span>
            {% for field in signForm %}
            {% if field.errors %}
            {{field.label}}
            {{field.errors}}
            {% endif %}
            {% endfor %}
        <span class="nt">&lt;/div&gt;</span>
        {% endif %}
        <span class="nt">&lt;div&gt;</span>
            {{ signForm.as_p }}
        <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn btn-info"</span><span class="nt">&gt;</span>sign in<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/div&gt;</span>
{% endblock %}
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">request.GET.error</code>는 유효성검사가 아닌 db의 데이터와 매치가 되지 않고 <code class="language-plaintext highlighter-rouge">error</code>값을 파라미터로 받았을 때 나타나게하는 문구입니다.</p>

<p><code class="language-plaintext highlighter-rouge">signForm.errors</code>는 form의 유효성 검사가 끝나고 유효하지 않으면 signForm에 errors를 받아와 if문에 걸리고 밑에 작성한 내용들을 출력합니다.</p>

<p>아래와 같이 유효성검사와 데이터 미스매치에 대한 결과를 손쉽게 볼 수 있습니다.</p>

<p>이메일 형식이 틀릴 때</p>

<figure class="text-center">
<span class="w-inline-block">
   <img src="/assets/images/post/django/modelform01.png" alt="sample" title="sample" />
   <figcaption>유효성 검사</figcaption>
</span>
</figure>

<p>필드가 비었을 때</p>

<figure class="text-center">
<span class="w-inline-block">
   <img src="/assets/images/post/django/modelform03.png" alt="sample" title="sample" />
   <figcaption>빈 필드</figcaption>
</span>
</figure>

<p>일치하는 데이터가 없을 때</p>

<figure class="text-center">
<span class="w-inline-block">
   <img src="/assets/images/post/django/modelform02.png" alt="sample" title="sample" />
   <figcaption>미스매치</figcaption>
</span>
</figure>

<h2 id="bootstrap-valid로-변경">bootstrap valid로 변경</h2>

<p><code class="language-plaintext highlighter-rouge">boostrap</code>은 <code class="language-plaintext highlighter-rouge">pip</code>로 먼저 <code class="language-plaintext highlighter-rouge">install</code>하고 <code class="language-plaintext highlighter-rouge">installed_apps</code>에 추가해주고 사용해야합니다. 사용법은 구글 검색으로 방대한 양의 내용이 있으니 참고하시기를.</p>

<p>설치는 <a href="https://pypi.org/project/django-bootstrap-v5/" target="_blank">여기</a>를 참고하세요.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre>{% load bootstrap5 %}
{% bootstrap_form signForm %}
</pre></td></tr></tbody></table></code></pre></div></div>

<p>기본 form에서와 마찬가지로 에러는 form의 field마다 자동으로 붙습니다. field별로 따로 작업 가능하며, error또한 별도로 제어 가능합니다.</p>

<p>field를 따로따로 설정하고 싶으시다면 <a href="https://docs.djangoproject.com/en/4.0/topics/forms/#rendering-fields-manually">여기</a>를 참고하시면 됩니다. djangoproject페이지 이고 form관련한 내용이 아주 잘 정리되어 있어 영알못이어도 쉽게 참고 가능합니다.</p>

<h2 id="add_error">add_error</h2>

<p>add_error는 위의 코드 중에서 잠시 나왔는데요. 아직 어떻게 활용하는지 명확하게는 모릅니다. 하지만 더 공부하면서 제대로된 목적으로 다시 정리하고자 하니 지금은 대충 이러하게 쓰인다 정도로만 정리하려합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="c1"># views.py 코드 일부
</span><span class="k">if</span> <span class="n">sign_form</span><span class="p">.</span><span class="n">is_valid</span><span class="p">():</span>
            <span class="s">""" forms.Form을 사용할 때
            sign_form = SignForm()
            username = sign_form.cleaned_data['username']
            password = sign_form.cleaned_data['password']
            """</span>
            <span class="n">username</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">'username'</span><span class="p">]</span>
            <span class="n">password</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">'password'</span><span class="p">]</span>

            <span class="k">if</span> <span class="s">' '</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">username</span><span class="p">:</span>
                <span class="n">sign_form</span><span class="p">.</span><span class="n">add_error</span><span class="p">(</span><span class="s">'username'</span><span class="p">,</span> <span class="s">'올바른 형식이 아닙니다.'</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">views.py</code>의 코드 일부인데요. 맨 아래 <code class="language-plaintext highlighter-rouge">if</code>문을 보시면 <code class="language-plaintext highlighter-rouge">add_error</code>라 하고 <code class="language-plaintext highlighter-rouge">field</code>명과 <code class="language-plaintext highlighter-rouge">error</code>메세지를 지정해서 추가하는 모습입니다.</p>

<p>분기문을 통해 기존에 있는 <code class="language-plaintext highlighter-rouge">is_valid</code>의 기준만이 아닌 사용자의 목적에 따라 <code class="language-plaintext highlighter-rouge">if</code>문으로 유효성 검사 목록을 더 추가 가능한 것으로 보입니다. 이러한 맥락으로 봤을 때 <code class="language-plaintext highlighter-rouge">add_error</code>한 시점부터 <code class="language-plaintext highlighter-rouge">form</code>의 에러 항목이 추가되고 <code class="language-plaintext highlighter-rouge">valid</code>되는 것 같습니다.</p>

<blockquote class="blockquote blockquote-info">
  <p>이는 짐작이고 추측이니 더 자세한 것은 해당 함수의 내용을 더 알아보고 해당 포스팅을 수정할 예정입니다.</p>
</blockquote>

<hr />

<p>📚 함께 보면 좋은 내용</p>

<p><a href="https://docs.djangoproject.com/en/4.0/topics/forms/#more-about-django-form-classes" target="_blank">Django Documentation :: form</a></p>

<p><a href="https://docs.djangoproject.com/es/2.1/ref/forms/fields/#required" target="_blank">Django Documentation :: Form fields v2.1</a></p>

<p><a href="https://docs.djangoproject.com/en/2.0/ref/forms/validation/" target="_blank">Django Documentation :: form v2.0</a></p>

<p><a href="https://stackoverflow.com/questions/53594745/what-is-the-use-of-cleaned-data-in-django" target="_blank">Stackoverflow :: What is the use of cleaned_data in Django</a></p>

<p><a href="https://stackoverflow.com/questions/16205908/django-modelform-not-required-field" target="_blank">Stackoverflow :: Django modelform NOT required field</a></p>

<p><a href="https://velog.io/@swhan9404/Django-Form" target="_blank">swhan9404님 :: Django Form</a></p>

<p><a href="https://junlab.tistory.com/193" target="_blank">Junlab님 :: 폼 활용이 편한 django 폼 사용법 (form이란 무엇인가요?)</a></p>

<p><a href="https://jinmay.github.io/2019/11/13/django/django-form-is-valid-mechanism-brief/" target="_blank">Jinmay님 :: [Form]의식의 흐름대로 정리하는 장고 Form</a></p>

<p><a href="https://niceit.tistory.com/395" target="_blank">낭만온달님 :: [Django] HTML 템플릿내에서 Form Class의 is_valid호출시 오류를 받아 처리하기</a></p>
:ET