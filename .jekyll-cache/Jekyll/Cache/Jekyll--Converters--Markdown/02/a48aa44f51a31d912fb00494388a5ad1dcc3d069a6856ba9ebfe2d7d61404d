I"Q!<h1 id="커스텀-템플릿-사용">커스텀 템플릿 사용</h1>

<p>데이터베이스에 태그를 저장할 때 1:n 관계로 테이블을 만들자니 내용 하나에 테이블을 하나 더 만드는게 비효율적인 것 같아 문자열로 콤마를 기준으로 구분했는데요.</p>

<p>django에서 템플릿 구문으로 뿌려주려고 split을 찾아보니 없더군요.</p>

<p>split등 필요한 함수들은 직접 사용자가 커스텀 템플릿 태그를 만들어야 합니다. 그러기 위해서 초기 세팅만 알아두면 그 뒤로는 필요한 커스텀 태그는 만들어 사용하면 됩니다.</p>

<p>필요한 세팅은 다음과 같습니다.</p>

<ol>
  <li>tempaltetags/ 디렉토리 생성 (폴더명 자유지만 이름을 바꿀 시 settings.py도 수정)</li>
  <li>customs.py 함수 작성 (파일명 자유)</li>
</ol>

<h2 id="templatetags-디렉토리">templatetags 디렉토리</h2>

<p>사용자화 할 함수를 작성하기 위해 함수들을 모아두는 라이브러리를 만드는데 있어서 현재 사용하고자 하는 앱 폴더 바로 하위에 templatetags/ 디렉토리를 생성합니다.</p>

<div class="btn-bundle">
   <button class="btn btn-info" target="origin" group="one">templatetags</button>
   <button class="btn btn-info" target="change" group="one">my_tags</button>
</div>

<div page="origin" group="one" class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="c1"># project_name/app_name/templatetags/customs.py
</span><span class="kn">from</span> <span class="nn">django</span> <span class="kn">import</span> <span class="n">template</span>

<span class="n">register</span> <span class="o">=</span> <span class="n">template</span><span class="p">.</span><span class="n">Library</span><span class="p">()</span>

<span class="o">@</span><span class="n">register</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'split'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">split</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
   <span class="k">return</span> <span class="n">value</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>

<span class="c1"># 만일 value가 None일 수 있는 상황에서 쓴다면 에러상황 처리도 해주셔야합니다.
</span><span class="o">@</span><span class="n">register</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">'split'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">split</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
   <span class="k">if</span> <span class="n">value</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
      <span class="k">return</span> <span class="n">value</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
   <span class="k">else</span><span class="p">:</span>
      <span class="k">return</span> <span class="n">value</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<div page="change" group="one">
   templatetags가 아닌 다른 이름으로 변경할 경우 settings.py에서 templates에 libraries를 추가해줘야 한다.
</div>

<div page="change" group="one" class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="n">TEMPLATES</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="c1"># ...
</span>        <span class="s">'OPTIONS'</span><span class="p">:</span> <span class="p">{</span>
            <span class="s">'context_processors'</span><span class="p">:</span> <span class="p">[</span>
                <span class="c1"># ...
</span>            <span class="p">],</span>
            <span class="s">'libraries'</span><span class="p">:</span> <span class="p">{</span> <span class="c1"># 여기에 아래와 같이 변경된 이름으로 추가
</span>                <span class="s">'customs'</span><span class="p">:</span> <span class="s">'todo.my_tags.customs'</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<hr />

<p>이렇게 필요한 함수를 만들었다면 template에서 사용하면 되는데, 자신이 작성한 <code class="language-plaintext highlighter-rouge">python</code>파일 명을 <code class="language-plaintext highlighter-rouge">load</code>해서 사용해야 합니다.</p>

<div class="btn-bundle">
   <button class="btn btn-info" target="first" group="two">for문</button>
   <button class="btn btn-info" target="second" group="two">단독</button>
</div>

<div page="first" group="two" class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="c">&lt;!-- layout.html --&gt;</span>
{% load customs %}
...
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
   {% with todo.tags|split:',' as tags%}
      {% for tag in tags %}
         {{tag}}<span class="nt">&lt;br&gt;</span>
      {% endfor %}
   {% endWith %}
<span class="nt">&lt;/div&gt;</span>
...
</pre></td></tr></tbody></table></code></pre></div></div>

<div page="second" group="two" class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="c">&lt;!-- layout.html --&gt;</span>
{% load customs %}
...
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"tag tag-info"</span><span class="nt">&gt;</span>
   {{ todo.tags|split:',' }} <span class="c">&lt;!-- 배열 출력 --&gt;</span>
<span class="nt">&lt;/span&gt;</span>
...
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">with</code>에 관한 자세한 사항은 <a href="https://docs.djangoproject.com/en/4.0/ref/templates/builtins/" target="_blank">여기</a>를 참고하세요.</p>

<p>이렇게 세팅하고나면 필요한 함수를 작성해서 사용하시면 됩니다. templatetags에 대해 더 알고 싶으시다면 django 공식 홈페이지의 docs를 읽어보시면 됩니다. 링크는 아래에 있습니다.</p>

<hr />

<p>📚 함께 보면 좋은 내용</p>

<p><a href="https://docs.djangoproject.com/en/4.0/howto/custom-template-tags/#code-layout" target="_blank">Djangoproject docs :: Code layout</a></p>

<p><a href="https://roytuts.com/creating-custom-template-tags-and-filter-in-django/" target="_blank">SOUMITRA :: Creating custom template tags and filter in Django</a></p>

<p><a href="https://moonbooks.org/Articles/How-to-create-a-list-of-items-from-a-string-in-a-Django-template-/" target="_blank">Daidalos :: How to create a list of items from a string in a Django template ?</a></p>

<p><a href="https://ozzieliu.com/2016/04/26/writing-liquid-template-in-markdown-with-jekyll/" target="_blank">Ozzie Liu :: Writing Liquid Template in Markdown Code Blocks with Jekyll</a></p>

<p><a href="https://gist.github.com/linuxkathirvel/8127c40fdad028bbb79bec24f36eee1c" target="_blank">linuxkathirvel :: split-filter-in-django-template.md - split string to array</a></p>

<p><a href="https://stackoverflow.com/questions/8317537/django-templates-split-string-to-array" target="_blank">Stackoverflow :: Django templates - split string to array</a></p>
:ET