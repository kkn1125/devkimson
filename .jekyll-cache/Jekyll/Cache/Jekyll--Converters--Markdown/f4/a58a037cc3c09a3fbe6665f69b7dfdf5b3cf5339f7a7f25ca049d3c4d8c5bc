I"st<h1 id="django-mysql연결과-rest-framework">Django MySQL연결과 Rest framework</h1>

<p>이번 포스팅은 데이터베이스 연결과 rest api를 사용하는 것에 대해 기록하려합니다.</p>

<p>db는 spring을 다룰 때도 mysql을 사용했었기 때문에 익숙한 것을 선택했구요. spring에서 사용했던 <code class="language-plaintext highlighter-rouge">put</code>과 <code class="language-plaintext highlighter-rouge">delete</code> method를 사용하기 위해 <code class="language-plaintext highlighter-rouge">rest_framework.decorate</code>를 사용하려합니다.</p>

<h2 id="준비">준비</h2>

<p>데이터베이스를 사용하고 api_view를 사용하려면 아래와 같이 설치할 게 두 가지가 있습니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="nv">$ </span>pip <span class="nb">install </span>mysqlclient
<span class="nv">$ </span>pip <span class="nb">install </span>djangorestframework
</pre></td></tr></tbody></table></code></pre></div></div>

<p>그리고 <code class="language-plaintext highlighter-rouge">settings.py</code>에 &#8220;나 이거 사용할거야&#8221;라고 등록을 해줍니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="c1"># settings.py
</span><span class="n">INSTALLED_APPS</span> <span class="o">=</span> <span class="p">[</span>
  <span class="c1"># ...
</span>  <span class="s">'rest_framework'</span><span class="p">,</span>
  <span class="c1"># ...
</span><span class="p">]</span>

<span class="kn">import</span> <span class="nn">my_database</span> <span class="c1"># 외부 파일을 가져올 것이기에 미리 적습니다.
</span>
<span class="n">DATABASES</span> <span class="o">=</span> <span class="n">my_database</span><span class="p">.</span><span class="n">DATABASES</span> <span class="c1"># 가져온 것을 DATABASES에 넣어줍니다.
</span></pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="데이터베이스-연결하기">데이터베이스 연결하기</h2>

<p>이렇게 세팅이 끝났다면 이제 <code class="language-plaintext highlighter-rouge">my_database</code>를 설정할 겁니다. 이제부터 편의상 프로젝트 최상위 폴더를 <code class="language-plaintext highlighter-rouge">root</code>라 칭하겠습니다.</p>

<p><code class="language-plaintext highlighter-rouge">root/my_database.py</code>를 생성합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="c1"># root/my_database.py
</span>
<span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'default'</span><span class="p">:</span> <span class="p">{</span>
        <span class="s">'ENGINE'</span><span class="p">:</span> <span class="s">'django.db.backends.mysql'</span><span class="p">,</span>
        <span class="s">'NAME'</span><span class="p">:</span> <span class="s">'py_board'</span><span class="p">,</span>
        <span class="s">'USER'</span><span class="p">:</span> <span class="s">'mysql_id'</span><span class="p">,</span>
        <span class="s">'PASSWORD'</span><span class="p">:</span> <span class="s">'mysql_password'</span><span class="p">,</span>
        <span class="s">'HOST'</span><span class="p">:</span> <span class="s">'localhost'</span><span class="p">,</span>
        <span class="s">'PORT'</span><span class="p">:</span> <span class="s">'3306'</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>주의할 점은 password가 노출되는 것은 좋지 않으니, .gitignore에서 꼭 등록해주어야 합니다.</p>
</blockquote>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
</pre></td><td class="rouge-code"><pre><span class="c"># .gitignore 예제</span>
my_database.py
</pre></td></tr></tbody></table></code></pre></div></div>

<p>데이터베이스 연결이 스프링과 비교하자면 매우 쉬웠습니다. 이게 연결 끝입니다.</p>

<p>이제 이것을 활용하려면 <code class="language-plaintext highlighter-rouge">django</code>에서 지원하는 <code class="language-plaintext highlighter-rouge">query</code>에 대해 알아야합니다. 이부분은 제가 여기에 알려주고 기록한다해도 스스로가 하지않으면 안되는 영역이라 생각합니다.</p>

<p>자주 쓰이는 것은 <code class="language-plaintext highlighter-rouge">objects.all()</code>과 <code class="language-plaintext highlighter-rouge">objects.get()</code>이라는 것 밖에는 없네요.</p>

<h2 id="view-구현하기">View 구현하기</h2>

<p>여러가지 찾다보니 View를 구성하는 방식이 엄청 많았습니다. api_view를 사용해서 스프링의 어노테이션처럼 <code class="language-plaintext highlighter-rouge">@api_view(['GET', 'POST'])</code>이렇게 함수에 바로 붙여 설정하기도 하고, <code class="language-plaintext highlighter-rouge">api</code>를 만들 때에 <code class="language-plaintext highlighter-rouge">APIView</code>를 사용해서 <code class="language-plaintext highlighter-rouge">json</code>으로 출력하는 등의 방법이 많았습니다.</p>

<p>저는 그 중에서도 제가 사용하는데 거리낌없이 익숙한데 새로운 것들만 골라 정리하려합니다. <code class="language-plaintext highlighter-rouge">api_view</code>와 <code class="language-plaintext highlighter-rouge">View</code>를 사용해보겠습니다.</p>

<h3 id="djangoviews의-view-사용">django.views의 View 사용</h3>

<p>View의 사용은 아직 알아볼게 많지만 정리해두겠습니다. 들어가기에 앞서 django에서는 <code class="language-plaintext highlighter-rouge">GET</code>과 <code class="language-plaintext highlighter-rouge">POST</code> 외의 요청은 <code class="language-plaintext highlighter-rouge">formdata</code>로 지원이 되지 않습니다.</p>

<p><code class="language-plaintext highlighter-rouge">postman</code>으로 확인해보면 <code class="language-plaintext highlighter-rouge">PUT</code>과 <code class="language-plaintext highlighter-rouge">DELETE</code>요청이 받아들여지긴 하지만 이를 사용하려면 <code class="language-plaintext highlighter-rouge">ajax</code>를 이용하거나 스프링에서 사용하던 <code class="language-plaintext highlighter-rouge">_method</code>를 <code class="language-plaintext highlighter-rouge">hidden</code>으로 보내주고 <code class="language-plaintext highlighter-rouge">views.py</code>에서 조작하면 됩니다.</p>

<p>실제 <code class="language-plaintext highlighter-rouge">PUT</code>과 <code class="language-plaintext highlighter-rouge">DELETE</code>는 아니지만 유사하게 사용할 수는 있습니다.</p>

<p>먼저 <code class="language-plaintext highlighter-rouge">View</code>를 사용할 때를 보겠습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="rouge-code"><pre><span class="c1"># views.py
</span>
<span class="c1"># from django.shortcuts import redirect, render, get_object_or_404
</span><span class="kn">from</span> <span class="nn">django.http</span> <span class="kn">import</span> <span class="n">HttpResponse</span><span class="p">,</span> <span class="n">JsonResponse</span>
<span class="kn">from</span> <span class="nn">django.views</span> <span class="kn">import</span> <span class="n">View</span>

<span class="k">class</span> <span class="nc">PostView</span><span class="p">(</span><span class="n">View</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
      <span class="k">print</span><span class="p">(</span><span class="n">kwargs</span><span class="p">.</span><span class="n">num</span><span class="p">)</span> <span class="c1"># num이라는 이름으로 파라미터를 넘겼을 때
</span>      <span class="n">board</span> <span class="o">=</span> <span class="n">Board</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>
      <span class="n">context</span> <span class="o">=</span> <span class="p">{</span>
          <span class="s">'board'</span><span class="p">:</span> <span class="n">board</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'blog/post_list.html'</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
      <span class="c1"># return HttpResponse("get 요청!") &lt;- 이것도 됩니다.
</span>      <span class="c1"># return JsonResponse({
</span>      <span class="c1">#   'dummy_name' : 'kimson',
</span>      <span class="c1">#   'dummy_age' : 30,
</span>      <span class="c1">#   'dummy_job' : 'no',
</span>      <span class="c1"># }) &lt;- json데이터 뿌려줄 때
</span>    
    <span class="k">def</span> <span class="nf">post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
      <span class="k">print</span><span class="p">(</span><span class="n">request</span><span class="p">)</span>
      <span class="n">context</span> <span class="o">=</span> <span class="p">{</span>
          <span class="s">'post'</span><span class="p">:</span> <span class="mi">1</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'blog/post_detail.html'</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
      <span class="c1"># return HttpResponse("post 요청!") &lt;- 이것도 됩니다.
</span>  
    <span class="k">def</span> <span class="nf">put</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
      <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="s">"""..."""</span><span class="p">)</span>
      <span class="c1"># return HttpResponse("put 요청!") &lt;- 이것도 됩니다.
</span>
    <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
      <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="s">"""..."""</span><span class="p">)</span>
      <span class="c1"># return HttpResponse("delete 요청!") &lt;- 이것도 됩니다.
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">url</code> 세팅은 다음과 같습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>

<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
  <span class="n">path</span><span class="p">(</span><span class="s">''</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">PostView</span><span class="p">.</span><span class="n">as_view</span><span class="p">(),</span> <span class="n">name</span> <span class="o">=</span> <span class="s">'post_list'</span><span class="p">),</span>
<span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>테스트 할 때 <code class="language-plaintext highlighter-rouge">postman</code>을 사용하신다면 <code class="language-plaintext highlighter-rouge">GET</code>요청 외에는 <code class="language-plaintext highlighter-rouge">csrftoken</code>값을 넘겨줘야 합니다. <code class="language-plaintext highlighter-rouge">csrftoken</code>은 쿠키에 보시면 있습니다.</p>
</blockquote>

<p>공식 홈페이지에서 본 튜토리얼과는 좀 다른 형태입니다. 함수들을 타고타고 올라가서 구성된 내용을 보니 대강은 이해가 됩니다.</p>

<p>이렇게 보니 하나의 <code class="language-plaintext highlighter-rouge">path</code>에 4가지 메서드 요청을 처리해주고 있습니다. <code class="language-plaintext highlighter-rouge">api</code>를 만들고 <code class="language-plaintext highlighter-rouge">axios</code>로 나중에 프론트에서 만져주면 될 것 같다는 생각이 듭니다. 아직 익숙하지 않아서 <strong>방법만 알고 넘어가려</strong>합니다.</p>

<p>각 <code class="language-plaintext highlighter-rouge">path</code>별로 <code class="language-plaintext highlighter-rouge">class</code>를 만들고 <code class="language-plaintext highlighter-rouge">GET</code>, <code class="language-plaintext highlighter-rouge">POST</code>, <code class="language-plaintext highlighter-rouge">PUT</code>, <code class="language-plaintext highlighter-rouge">DELETE</code>를 따로 만들어 관리하면 직관적이라 관리할 때 용이 할 것 같습니다.</p>

<h3 id="rest_frameworkdecorates의-api_view-사용">rest_framework.decorates의 api_view 사용</h3>

<p>현재 계속해서 사용중인 <code class="language-plaintext highlighter-rouge">api_view</code>입니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="kn">from</span> <span class="nn">django.shortcuts</span> <span class="kn">import</span> <span class="n">render</span><span class="p">,</span> <span class="n">redirect</span>
<span class="kn">from</span> <span class="nn">rest_framework.decorators</span> <span class="kn">import</span> <span class="n">api_view</span>

<span class="o">@</span><span class="n">api_view</span><span class="p">([</span><span class="s">'GET'</span><span class="p">,</span> <span class="s">'POST'</span><span class="p">,</span> <span class="s">'PUT'</span><span class="p">,</span> <span class="s">'DELETE'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">post_control</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">method</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'GET'</span><span class="p">:</span>
        <span class="n">post</span> <span class="o">=</span> <span class="n">get_object_or_404</span><span class="p">(</span><span class="n">Board</span><span class="p">,</span> <span class="n">num</span><span class="o">=</span><span class="n">num</span><span class="p">)</span>
        
        <span class="n">context</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">'post'</span><span class="p">:</span> <span class="n">post</span>
        <span class="p">}</span>
    
        <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'blog/post_control.html'</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span> <span class="ow">and</span> <span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">[</span><span class="s">'_method'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'delete'</span><span class="p">:</span>
        <span class="n">board</span> <span class="o">=</span> <span class="n">Board</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">num</span><span class="o">=</span><span class="n">num</span><span class="p">)</span>
        <span class="n">board</span><span class="p">.</span><span class="n">delete</span><span class="p">()</span>
        
        <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">'post_list'</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'DELETE'</span><span class="p">:</span>
      <span class="c1"># ... axios, ajax로 요청보낼 때 등등
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>현재 게시판을 만들고 있는 <code class="language-plaintext highlighter-rouge">views.py</code>의 일부인데요. <code class="language-plaintext highlighter-rouge">request.POST</code>의 <code class="language-plaintext highlighter-rouge">QueryDict</code>에 담겨 전달되는 <code class="language-plaintext highlighter-rouge">_method</code>를 받아 분기문으로 처리하고 있습니다.</p>

<p>이 방법 외에 아래의 방법도 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="c1"># ref - 포스팅 최하단 링크 참조 [Stackoverflow]
</span>
<span class="k">class</span> <span class="nc">TestView</span><span class="p">(</span><span class="n">View</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">dispatch</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="n">method</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'_method'</span><span class="p">,</span> <span class="s">''</span><span class="p">).</span><span class="n">lower</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">method</span> <span class="o">==</span> <span class="s">'put'</span><span class="p">:</span>
      <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">put</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">method</span> <span class="o">==</span> <span class="s">'delete'</span><span class="p">:</span>
      <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">delete</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">super</span><span class="p">(</span><span class="n">TestView</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">dispatch</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

  <span class="k">def</span> <span class="nf">put</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"나는 %s입니다."</span> <span class="o">%</span> <span class="bp">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'_method'</span><span class="p">))</span>

  <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"나는 %s입니다."</span> <span class="o">%</span> <span class="bp">self</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'_method'</span><span class="p">))</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>여기까지 사용하는 형태만을 봤는데요. <code class="language-plaintext highlighter-rouge">class</code>로 <code class="language-plaintext highlighter-rouge">method</code>요청 처리를 하던, <code class="language-plaintext highlighter-rouge">api_view</code>로 처리하던 아직까지는 큰 차이점을 느끼지 못하겠습니다. 사용하다보면 더 좋은 방법이 있을테고 또 배워서 제 것으로 만들어야 겠지요.</p>

<h3 id="django-튜토리얼의-view-처리">django 튜토리얼의 view 처리</h3>

<p><code class="language-plaintext highlighter-rouge">url</code> 세팅은 처음에 이랬죠.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="c1"># blog/urls.py
</span><span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">path</span>

<span class="kn">from</span> <span class="nn">.</span> <span class="kn">import</span> <span class="n">views</span>

<span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span><span class="n">path</span><span class="p">:</span> <span class="s">''</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">post_list</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'post_list'</span><span class="p">},</span>
  <span class="p">{</span><span class="n">path</span><span class="p">:</span> <span class="s">'/post/&lt;int:num&gt;'</span><span class="p">,</span> <span class="n">views</span><span class="p">.</span><span class="n">post_detail</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'post_detail'</span><span class="p">},</span>
<span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>기존에 사용하던 <code class="language-plaintext highlighter-rouge">views.py</code> 방식은 아래와 같았습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="c1"># views.py
# ... 생략
</span>
<span class="k">def</span> <span class="nf">post_list</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
  <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>
    <span class="c1"># ... 저장, 삭제, 수정 등
</span>    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'blog/post_list.html'</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="c1"># ... 읽기
</span>    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'blog/post_list.html'</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">post_detail</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="c1"># ... 읽기
</span>    <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'blog/post_list.html'</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이제 각각의 차이점이 조금씩 보이기 시작합니다. <code class="language-plaintext highlighter-rouge">method</code>처리하는 것도 많이 부족하니 찾아봐야하고, 패턴에 대해서도 공부를 해야할 것 같습니다. <code class="language-plaintext highlighter-rouge">django</code>에서는 <code class="language-plaintext highlighter-rouge">mvc</code>패턴이 아닌 <code class="language-plaintext highlighter-rouge">mtv</code>나 <code class="language-plaintext highlighter-rouge">mvvm</code>패턴도 있다고 하니 다음에 다루어 볼 생각입니다.</p>

<hr />

<p>📚 함께 보면 좋은 내용</p>

<p><a href="https://stackoverflow.com/questions/36455189/put-and-delete-django">Stackoverflow :: PUT and DELETE Django</a></p>

<p><a href="https://docs.djangoproject.com/en/4.0/topics/db/queries/">Django :: Documentation</a></p>

<p><a href="https://www.django-rest-framework.org/api-guide/views/#api_view">Django REST framework :: api_view</a></p>

<p><a href="https://www.bezkoder.com/django-rest-api/">BezKoder :: Django: POST, PUT, GET, DELETE requests example | Rest Apis</a></p>

<p><a href="https://naon.me/posts/til57">naon님 :: Django Rest Framework 활용하기 2 - @api_view</a></p>

<p><a href="https://eunjin3786.tistory.com/133">eungding님 :: HTTP Request를 받아서 응답해주기 (GET, POST, PUT, DELETE)</a></p>

<p><a href="https://parksunwoo.github.io/django/2020/12/25/api-rest-framework-view.html">Sunwoo Park님 :: API 그리고 Django REST framework View들 비교하기</a></p>

<p><a href="https://ssungkang.tistory.com/entry/DjangoCross-Site-Request-Forgery-csrf-%EA%B3%B5%EA%B2%A9%EA%B3%BC-%EB%8C%80%EC%9D%91">ssung.k님 :: Cross Site Request Forgery, csrf 공격과 대응</a></p>

<p><a href="https://woolbro.tistory.com/98">woolbro님 :: 장고 (Django)를 사용한 CRUD 예제 만들기</a></p>

<p><a href="https://velog.io/@new_wisdom/django-4-Django%EB%A1%9C-CRUD%ED%95%98%EA%B8%B0">new_wisdom님 :: #4 Django로 CRUD하기</a></p>

<p><a href="https://d-yong.tistory.com/61">d-yong님 :: 간단한 REST API 서버 만들기4 - Class Based View에서 POST, GET, PUT, DELETE 구현</a></p>

<p><a href="https://velog.io/@swhan9404/django-rest-api-%EA%B2%8C%EC%8B%9C%EA%B8%80-%EB%8C%93%EA%B8%80-%EC%8B%A4%EC%8A%B5">swhan9404님 :: django rest api 게시글, 댓글 실습</a></p>
:ET