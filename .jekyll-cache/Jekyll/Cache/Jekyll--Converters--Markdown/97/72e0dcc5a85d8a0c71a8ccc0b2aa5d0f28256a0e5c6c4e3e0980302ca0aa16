I"9g<h1 id="기존-정보에-수정된-정보를-덮어쓰기">기존 정보에 수정된 정보를 덮어쓰기</h1>

<p>회원정보를 수정하다보면 초기에는 <code class="language-plaintext highlighter-rouge">request.POST['datatype']</code>으로 하나씩 받아와 데이터베이스를 조회해서 user를 가져오고 하나 씩 담았습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">pk</span><span class="o">=</span><span class="n">num</span><span class="p">).</span><span class="n">get</span><span class="p">(</span><span class="n">pk</span><span class="o">=</span><span class="n">num</span><span class="p">)</span>

    <span class="n">nickname</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">[</span><span class="s">'nickname'</span><span class="p">]</span>
    <span class="n">email</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">[</span><span class="s">'email'</span><span class="p">]</span>
    <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">[</span><span class="s">'password'</span><span class="p">]</span>
    <span class="n">profile</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">POST</span><span class="p">[</span><span class="s">'profile'</span><span class="p">]</span>

    <span class="n">user</span><span class="p">.</span><span class="n">nickname</span> <span class="o">=</span> <span class="n">nickname</span>
    <span class="n">user</span><span class="p">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">email</span>
    <span class="n">user</span><span class="p">.</span><span class="n">password</span> <span class="o">=</span> <span class="n">password</span>
    <span class="n">user</span><span class="p">.</span><span class="n">profile</span> <span class="o">=</span> <span class="n">profile</span>

    <span class="n">user</span><span class="p">.</span><span class="n">save</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위의 형식이 꽤 번거로웠습니다. 스프링에서는 form data를 전송하면 request를 보낼 때 알아서 객체에 담아줬습니다. 분명 장고에도 있을 거라는 예감은 틀리지 않았습니다.</p>

<h2 id="모델-폼">모델 폼</h2>

<p>modelForm을 쓰다보면 <code class="language-plaintext highlighter-rouge">create</code>, <code class="language-plaintext highlighter-rouge">update</code>가 단 몇 줄에 끝납니다. 그렇게 편하게 쓰던 중에 고민이 하나 생겼습니다.</p>

<h3 id="공백은-무시하고-작성한-데이터만-받기">공백은 무시하고 작성한 데이터만 받기</h3>

<p>게시글을 수정할 때는 모든 데이터를 받아 업데이트 폼으로 연결하면 해당 데이터들이 pk값 빼고는 다 나타나는 구조였습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
<span class="kn">from</span> <span class="nn">django.utils</span> <span class="kn">import</span> <span class="n">timezone</span>
<span class="k">class</span> <span class="nc">Post</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">num</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">AutoField</span><span class="p">(</span><span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">title</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">45</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">content</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">author</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">45</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">regdate</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="s">'created'</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">timezone</span><span class="p">.</span><span class="n">now</span><span class="p">,</span> <span class="n">editable</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">updates</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="s">'updated'</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">timezone</span><span class="p">.</span><span class="n">now</span><span class="p">,</span> <span class="n">editable</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>대략 위와 같은 컬럼은 가진 모델로 작성했습니다. 그런데 만일 변경하지 않아도 되는, 즉, 기존 값을 유지하되 새로운 값이 있으면 덮어써야 하는 경우가 발생하는 때가 있습니다.</p>

<p>예를들면 이미지같은 경우입니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">Post</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="c1"># 코드 상동
</span>    <span class="s">"""
    이미지 필드 추가
    """</span>
    <span class="n">cover</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">ImageField</span><span class="p">(</span><span class="n">upload_to</span><span class="o">=</span><span class="s">""</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="c1"># ...
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>이렇게 이미지 필드가 추가된 경우에는 <code class="language-plaintext highlighter-rouge">html input</code>태그의 <code class="language-plaintext highlighter-rouge">file</code>타입 특성상 <code class="language-plaintext highlighter-rouge">value</code>값 설정이 안 됩니다.</p>

<p>태그에 <code class="language-plaintext highlighter-rouge">value</code>를 지정해도 <code class="language-plaintext highlighter-rouge">form</code>데이터에 넘겨도 <a href="https://jkorpela.fi/forms/file.html#value" target="_blank">보안상 이유</a>로 값이 넘어가지 않습니다.</p>

<p>그리고 <code class="language-plaintext highlighter-rouge">cover</code> 필드 추가와 함께 저는 <code class="language-plaintext highlighter-rouge">forms.py</code>에 작성된 패스워드 필드와 커버 필드에 속성을 변경했습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="k">class</span> <span class="nc">UserForm</span><span class="p">(</span><span class="n">ModelForm</span><span class="p">):</span>
    <span class="s">""" 추가 """</span>
    <span class="n">cover</span> <span class="o">=</span> <span class="n">ImageField</span><span class="p">(</span><span class="n">widget</span><span class="o">=</span><span class="n">FileInput</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">'type'</span><span class="p">:</span> <span class="s">'file'</span><span class="p">}))</span>
    <span class="n">password</span> <span class="o">=</span> <span class="n">CharField</span><span class="p">(</span><span class="n">widget</span><span class="o">=</span><span class="n">PasswordInput</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">'type'</span><span class="p">:</span> <span class="s">'password'</span><span class="p">,</span> <span class="s">'autocomplete'</span><span class="p">:</span> <span class="s">'current-password'</span><span class="p">}))</span>
    <span class="s">""" 추가 """</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">User</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="p">[</span>
            <span class="s">'profile'</span><span class="p">,</span> <span class="s">'nickname'</span><span class="p">,</span> <span class="s">'email'</span><span class="p">,</span> <span class="s">'password'</span>
            <span class="p">]</span>
        <span class="n">widgets</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">'email'</span><span class="p">:</span> <span class="n">EmailInput</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">'autocomplete'</span><span class="p">:</span> <span class="s">'username'</span><span class="p">}),</span>
        <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>cover type을 또 지정해 준 이유는 django에서 기본적으로 fileInput에 현재와 변경 정보를 함께 띄워줍니다. 그게 싫어서 file input만 나타나게 하기 위함입니다.<br />
password는 charfield이지만 암호화되어 보여야하니 type을 변경한 것 입니다.</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">.models</span> <span class="kn">from</span> <span class="nn">User</span>
<span class="kn">import</span> <span class="p">.</span><span class="n">forms</span> <span class="kn">from</span> <span class="nn">UserForm</span>
<span class="kn">import</span> <span class="n">rest_framework</span><span class="p">.</span><span class="n">decorators</span> <span class="k">from</span> <span class="n">api_view</span>

<span class="o">@</span><span class="n">api_view</span><span class="p">([</span><span class="s">'GET'</span><span class="p">,</span> <span class="s">'POST'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">num</span><span class="o">=</span><span class="n">num</span><span class="p">).</span><span class="n">get</span><span class="p">(</span><span class="n">num</span><span class="o">=</span><span class="n">num</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'GET'</span><span class="p">:</span>

        <span class="n">context</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">'path_type'</span><span class="p">:</span> <span class="n">path_type</span><span class="p">(</span><span class="n">request</span><span class="p">),</span>
            <span class="s">'userForm'</span><span class="p">:</span> <span class="n">UserForm</span><span class="p">(</span><span class="n">instance</span><span class="o">=</span><span class="n">user</span><span class="p">),</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">render</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">'scheduler/signup.html'</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>
        <span class="n">userForm</span> <span class="o">=</span> <span class="n">UserForm</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">POST</span> <span class="ow">or</span> <span class="bp">None</span><span class="p">,</span>
                            <span class="n">request</span><span class="p">.</span><span class="n">FILES</span> <span class="ow">or</span> <span class="bp">None</span><span class="p">,</span>
                            <span class="n">instance</span><span class="o">=</span><span class="n">user</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">userForm</span><span class="p">.</span><span class="n">is_valid</span><span class="p">():</span>
            <span class="n">uf</span> <span class="o">=</span> <span class="n">userForm</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">commit</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
            <span class="n">request</span><span class="p">.</span><span class="n">session</span><span class="p">[</span><span class="s">'sign'</span><span class="p">]</span> <span class="o">=</span> <span class="n">uf</span><span class="p">.</span><span class="n">pk</span>
            <span class="n">uf</span><span class="p">.</span><span class="n">save</span><span class="p">()</span>

        <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">'account:update'</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">pk</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위 코드처럼 <code class="language-plaintext highlighter-rouge">UserForm</code>에 <code class="language-plaintext highlighter-rouge">instance</code>와 <code class="language-plaintext highlighter-rouge">request</code>를 넣어줬습니다. <code class="language-plaintext highlighter-rouge">cover</code>라는 <code class="language-plaintext highlighter-rouge">field</code>도 추가를 했구요. 이대로 <code class="language-plaintext highlighter-rouge">form</code>을 작성하고 <code class="language-plaintext highlighter-rouge">post</code>요청하게 되면 데이터가 변경/저장 되지 않습니다. <code class="language-plaintext highlighter-rouge">is_valid</code>에서 <code class="language-plaintext highlighter-rouge">Falsy</code>한 값을 받아 <code class="language-plaintext highlighter-rouge">save</code>되지 않게 됩니다.</p>

<p>이유는 <code class="language-plaintext highlighter-rouge">request.FILES['profile']</code>이 빈 값이고, 비밀번호는 <code class="language-plaintext highlighter-rouge">password</code>타입으로 변경하면 instance에 유저 정보를 넣고 form을 출력해도 <code class="language-plaintext highlighter-rouge">value</code>에 회원 비밀번호가 들어가지 않습니다.</p>

<p>이렇게 빈 값이 발생하면 <code class="language-plaintext highlighter-rouge">is_valid</code>에서 막히게 되는데 찾아보니 간단하게 해결할 수 있는 문제였습니다.</p>

<p><code class="language-plaintext highlighter-rouge">forms.py</code>에 있던 <code class="language-plaintext highlighter-rouge">password</code>와 <code class="language-plaintext highlighter-rouge">cover</code>에 <code class="language-plaintext highlighter-rouge">requied</code>를 <code class="language-plaintext highlighter-rouge">False</code>로 변경해줍니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="c1"># forms.py
</span><span class="k">class</span> <span class="nc">UserForm</span><span class="p">(</span><span class="n">ModelForm</span><span class="p">):</span>
    <span class="n">cover</span> <span class="o">=</span> <span class="n">ImageField</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">widget</span><span class="o">=</span><span class="n">FileInput</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">'type'</span><span class="p">:</span> <span class="s">'file'</span><span class="p">}))</span>
    <span class="n">password</span> <span class="o">=</span> <span class="n">CharField</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">widget</span><span class="o">=</span><span class="n">PasswordInput</span><span class="p">(</span><span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="s">'type'</span><span class="p">:</span> <span class="s">'password'</span><span class="p">,</span> <span class="s">'autocomplete'</span><span class="p">:</span> <span class="s">'current-password'</span><span class="p">}))</span>

    <span class="c1"># Meta ...
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>이제 <code class="language-plaintext highlighter-rouge">cover</code>는 필수로 받는 항목이 아니기 때문에 이미지 파일을 새로 업로드 하지 않아도, 빈값으로 form <code class="language-plaintext highlighter-rouge">data</code>가 전송되어져도 기존의 값 그대로 유지 됩니다.</p>

<p>하지만 <code class="language-plaintext highlighter-rouge">password</code>는 아닙니다. 무엇 때문인지 자세히 모릅니다. <span class="text-danger fw-bold">어디까지나 추측입니다만</span>, <code class="language-plaintext highlighter-rouge">type</code>에 <code class="language-plaintext highlighter-rouge">password</code>가 설정되면서 <code class="language-plaintext highlighter-rouge">value</code>에 값이 들어가지 않는 점이 문제라 생각됩니다.</p>

<p>즉, 애초에 <code class="language-plaintext highlighter-rouge">password type</code>의 <code class="language-plaintext highlighter-rouge">input</code>은 보안상 <code class="language-plaintext highlighter-rouge">value</code>에 값이 들어가지 않으니 <code class="language-plaintext highlighter-rouge">form data</code>가 <code class="language-plaintext highlighter-rouge">POST</code>로 전송된다면, 일반적으로 패스워드는 로그인에 사용하기 때문에 필수 항목으로 보고 가져와 적용하는 것으로 생각됩니다. 자세한 원리는 찾아서 포스팅 내용을 수정하도록 하겠습니다. 어디까지나 제 생각입니다.</p>

<p>그래서 cover는 required를 False로 설정하면 해결됩니다. password는 is_valid하기 전에 User모델에서 pk값으로 가져온 데이터의 비밀번호를 변수에 담아두고 입력된 비밀번호가 빈 값일 때 저장해두었던 변수를 대신 저장시키는 방식으로 하면 됩니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="c1"># 생략
</span>
<span class="o">@</span><span class="n">api_view</span><span class="p">([</span><span class="s">'GET'</span><span class="p">,</span> <span class="s">'POST'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
    <span class="c1"># 생략
</span>    <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">filter</span><span class="p">(</span><span class="n">num</span><span class="o">=</span><span class="n">num</span><span class="p">).</span><span class="n">get</span><span class="p">(</span><span class="n">num</span><span class="o">=</span><span class="n">num</span><span class="p">)</span>
    <span class="n">origin_password</span> <span class="o">=</span> <span class="n">user</span><span class="p">.</span><span class="n">password</span>         <span class="c1"># +
</span>    
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'GET'</span><span class="p">:</span>
        <span class="c1"># 생략
</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># 생략
</span>
        <span class="k">if</span> <span class="n">userForm</span><span class="p">.</span><span class="n">is_valid</span><span class="p">():</span>
            <span class="n">uf</span> <span class="o">=</span> <span class="n">userForm</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">commit</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">uf</span><span class="p">.</span><span class="n">password</span><span class="p">:</span>             <span class="c1"># +
</span>                <span class="n">uf</span><span class="p">.</span><span class="n">password</span> <span class="o">=</span> <span class="n">origin_pass</span>   <span class="c1"># +
</span>
            <span class="c1"># 생략
</span>
            <span class="n">uf</span><span class="p">.</span><span class="n">save</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">redirect</span><span class="p">(</span><span class="s">'account:update'</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">pk</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>찾아보면 분명히 간결하고 편리한 방법이 있을 것이라 생각합니다. 포스팅에 포함된 추측성 내용은 추후에 알게되면 정정해서 다시 게재할 예정입니다.</p>

<hr />

<p>📚 함께 보면 좋은 내용</p>

<p><a href="https://tothefullest08.github.io/django/2019/06/19/Django24_accounts4_update_delete_password/" target="_blank">해리님 :: Django 24 - 유저 정보 수정 &amp; 삭제</a></p>

<p><a href="https://programmers-sosin.tistory.com/entry/Django-Validator-%EC%9E%A5%EA%B3%A0-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%A6%9D-Form%EC%97%90%EC%84%9C-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%A6%9D%ED%95%98%EA%B8%B0" target="_blank">sosin님 :: Django Validator / 장고 유효성 검증 / Form에서 유효성 검증하기</a></p>

<p><a href="https://gosmcom.tistory.com/143" target="_blank">반원_SemiCircle님 :: django - 로그인 처리 (세션 이용)</a></p>

<p><a href="https://stackoverflow.com/questions/37475302/show-initial-value-for-filefield-in-django-template" target="_blank">Stackoverflow :: django - Show initial value for FileField in django-template</a></p>
:ET