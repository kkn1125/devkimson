I".G<h1 id="linkedlist-구현">LinkedList 구현</h1>

<blockquote>
  <p>이해한대로 만든 것이기 때문에 정확하지 않을 수 있습니다.</p>
</blockquote>

<p>LinkedList는 <code class="language-plaintext highlighter-rouge">node</code>의 연결로 이루어져있습니다. <code class="language-plaintext highlighter-rouge">node</code>는 데이터 값과 <code class="language-plaintext highlighter-rouge">next</code>, 혹은 <code class="language-plaintext highlighter-rouge">prev</code>값을 가지며, 이번 주제에서는 <code class="language-plaintext highlighter-rouge">next</code>만 있는 <code class="language-plaintext highlighter-rouge">node</code>를 가진 <code class="language-plaintext highlighter-rouge">LinkedList</code>를 만들어보려합니다.</p>

<p><code class="language-plaintext highlighter-rouge">new LinkedList(data)</code>의 형식으로 구현하는 방법은 추후에 따로 포스팅하겠습니다.</p>

<h2 id="linkedlist의-모양">LinkedList의 모양</h2>

<p><img src="/assets/images/post/datastudy/linkedlist/linkedlist01.png" alt="LinkedList" title="도식" />
<a href="https://habr.com/en/post/506660/" target="_blank">이미지 출처</a></p>

<p>모양은 이렇습니다. 각 <code class="language-plaintext highlighter-rouge">node</code>는 <code class="language-plaintext highlighter-rouge">data</code>, <code class="language-plaintext highlighter-rouge">next</code> 프로퍼티를 가지고, 첫 요소는 <code class="language-plaintext highlighter-rouge">head</code>에 그 다음 추가되는 요소는 이전 요소의 <code class="language-plaintext highlighter-rouge">next</code>에도 저장이 되면서 쌓여갑니다.</p>

<p>아직 이해도가 높지 않아 잘못된 정보를 퍼뜨리기보다 현재 이해한 내용을 토대로 작성했음을 다시 한 번 알려드립니다.</p>

<h2 id="linkedlist-객체-구현">LinkedList 객체 구현</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
</pre></td><td class="rouge-code"><pre><span class="c1">// 포스팅하면서 지금 보니 굳이 datas라는 배열을 만들 필요는 없습니다. next로 순회해서 전체 출력 가능한 점 알려드립니다.</span>
<span class="kd">function</span> <span class="nx">LinkedList</span><span class="p">(){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">datas</span> <span class="o">=</span> <span class="p">[];</span> <span class="c1">// 필요없을 것 같습니다.</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">head</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span> <span class="c1">// 첫 요소입니다.</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 배열 크기</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">Node</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">next</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 노드 객체</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span> <span class="c1">// 담기는 데이터</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">next</span><span class="p">;</span> <span class="c1">// 해당 데이터의 다음 데이터 (Node type)</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// node 추가</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">datas</span> <span class="o">=</span> <span class="p">[...</span><span class="k">this</span><span class="p">.</span><span class="nx">datas</span><span class="p">,</span> <span class="k">new</span> <span class="k">this</span><span class="p">.</span><span class="nx">Node</span><span class="p">(</span><span class="nx">data</span><span class="p">)];</span>
        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">datas</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">next</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">datas</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">];</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">head</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">datas</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="p">.</span><span class="kd">get</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">item</span> <span class="k">of</span> <span class="k">this</span><span class="p">.</span><span class="nx">datas</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">data</span><span class="o">==</span><span class="nx">data</span><span class="p">)</span>
                <span class="k">return</span> <span class="nx">item</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="p">.</span><span class="kd">set</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">change</span><span class="p">){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">datas</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">item</span><span class="p">,</span><span class="nx">index</span><span class="p">,</span><span class="nx">list</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">data</span><span class="o">==</span><span class="nx">data</span><span class="p">){</span>
                <span class="nx">item</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">change</span><span class="p">;</span>
                <span class="nx">list</span><span class="p">[</span><span class="nx">index</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                <span class="p">?</span><span class="nx">list</span><span class="p">[</span><span class="nx">index</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">item</span><span class="p">:</span><span class="kc">null</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">});</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">remove</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">change</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span>
        <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">item</span> <span class="k">of</span> <span class="k">this</span><span class="p">.</span><span class="nx">datas</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">data</span> <span class="o">!=</span> <span class="nx">data</span><span class="p">){</span>
                <span class="nx">change</span><span class="o">=</span><span class="p">[...</span><span class="nx">change</span><span class="p">,</span> <span class="nx">item</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">datas</span> <span class="o">=</span> <span class="nx">change</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">head</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">datas</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="o">--</span><span class="p">;</span>
        <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">datas</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">x</span><span class="o">=&gt;</span><span class="nx">x</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="구문-해석">구문 해석</h2>

<h3 id="node-객체">node 객체</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="k">this</span><span class="p">.</span><span class="nx">head</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">this</span><span class="p">.</span><span class="nx">Node</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">next</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">next</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">head</code>는 기본 <code class="language-plaintext highlighter-rouge">null</code>값이 됩니다. <code class="language-plaintext highlighter-rouge">size</code>는 당연히 0입니다. 이 부분에서는 크게 2가지 기능이 필요하게 됩니다.</p>

<ol>
  <li>처음 추가 시</li>
  <li>1회 이상 추가 시</li>
</ol>

<p>처음 추가 할 때는 head에 값이 들어가게 되고, next는 null을 가지며 data에 입력 값이 들어가게 됩니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="c1">// 최초 추가</span>
<span class="kd">const</span> <span class="nx">arr1</span> <span class="o">=</span> <span class="p">{</span><span class="na">data</span><span class="p">:</span><span class="dl">'</span><span class="s1">kimson</span><span class="dl">'</span><span class="p">,</span> <span class="na">next</span><span class="p">:</span> <span class="kc">null</span><span class="p">}</span>

<span class="c1">// 1회 이상 추가</span>
<span class="kd">const</span> <span class="nx">arr2</span> <span class="o">=</span> <span class="p">{</span><span class="na">data</span><span class="p">:</span><span class="dl">'</span><span class="s1">papa</span><span class="dl">'</span><span class="p">,</span> <span class="na">next</span><span class="p">:</span> <span class="kc">null</span><span class="p">}</span>
<span class="c1">// arr1.next = arr2가 되야 하는 조건</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이제 <code class="language-plaintext highlighter-rouge">add</code> 메서드를 구현한 방식을 살펴보겠습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">LinkedList</span><span class="p">(){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">datas</span> <span class="o">=</span> <span class="p">[];</span> <span class="c1">// 사실상 필요 없는 변수</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">head</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">Node</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">next</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">datas</span> <span class="o">=</span> <span class="p">[...</span><span class="k">this</span><span class="p">.</span><span class="nx">datas</span><span class="p">,</span> <span class="k">new</span> <span class="k">this</span><span class="p">.</span><span class="nx">Node</span><span class="p">(</span><span class="nx">data</span><span class="p">)];</span>
        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">datas</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">next</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">datas</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">];</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">head</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">datas</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">add</code>메서드는 단순합니다. <code class="language-plaintext highlighter-rouge">this.datas</code>는 필요가 없습니다만 설명을 위해 남겨두었습니다.  왜 필요없냐면 <code class="language-plaintext highlighter-rouge">head</code>에서부터 계속 <code class="language-plaintext highlighter-rouge">next</code>로 타고 가는 형태이기 때문에 굳이 다시 배열에 따로 저장해서 꺼내오는 것을 필요없다 생각됩니다. 그래서 datas가 빠지면서</p>

:ET