I"K&<h1 id="authentication-user-확장">Authentication User 확장</h1>

<blockquote>
  <p>사용된 라이브러리나 템플릿 태그 등은 <a href="https://kkn1125.github.io/django-authenticate/" target="_blank">이전 포스팅</a>을 참고하시기 바랍니다.</p>
</blockquote>

<p>이어서 <code class="language-plaintext highlighter-rouge">User Authentication</code>을 확장해서 사용하는 것을 기록하려합니다. 찾아보니 4가지의 방법이 있습니다.</p>

<ol>
  <li>Proxy model</li>
  <li>OneToOne 연결</li>
  <li><code class="language-plaintext highlighter-rouge">AbstractUser</code> model 사용</li>
  <li>AbstractBaseUser model 사용</li>
</ol>

<p>이번에 다룰 내용은 3번 <code class="language-plaintext highlighter-rouge">AbstractUser</code>이기 때문에 나머지는 추후에 다루도록 하겠습니다.</p>

<h2 id="기본적인-설정">기본적인 설정</h2>

<p>설정할 부분은 <code class="language-plaintext highlighter-rouge">settings.py</code>와 <code class="language-plaintext highlighter-rouge">models.py</code>입니다. 여기서 <code class="language-plaintext highlighter-rouge">models.py</code>에는 기본적으로 제공되는 <code class="language-plaintext highlighter-rouge">User</code>의 필드 외에 추가할 필드를 작성하게 됩니다.</p>

<p>기본적으로 10개의 필드가 있다면, <code class="language-plaintext highlighter-rouge">profile</code>, <code class="language-plaintext highlighter-rouge">gender</code>, <code class="language-plaintext highlighter-rouge">address</code>라는 필드 3개가 추가된다고 가정한다면 총 13개의 필드를 가진 <code class="language-plaintext highlighter-rouge">User</code>테이블을 만듭니다.</p>

<p>사용자화 하기 위해 우선 settings에 인증 유저 모델을 어떤 것을 참조하라고 설정해줘야 합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre><span class="c1"># auth_test/auth_test/settings.py
</span>
<span class="n">AUTH_USER_MODEL</span> <span class="o">=</span> <span class="s">'myapp.MyUser'</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>현재 작업 중인 프로젝트 명과 클래스 이름을 예로들면 <code class="language-plaintext highlighter-rouge">apps.MyUser</code>이 됩니다. 파일 명 제외하고 파일 내에 있는 클래스명이 바로 붙습니다. 어차피 파일명을 실수도 붙이더라도 오류를 내면서 알려줍니다.</p>

<p>그 다음 <code class="language-plaintext highlighter-rouge">User</code>클래스에 <code class="language-plaintext highlighter-rouge">AbstractUser</code>를 상속합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="c1"># auth_test/apps/models.py
</span>
<span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>
<span class="kn">from</span> <span class="nn">django.contrib.auth.models</span> <span class="kn">import</span> <span class="n">AbstractUser</span>

<span class="c1"># Create your models here.
</span><span class="k">class</span> <span class="nc">MyUser</span><span class="p">(</span><span class="n">AbstractUser</span><span class="p">):</span>
    <span class="s">"""
    models.Model이 아닌 AbstractUser입니다.
    """</span>
    <span class="n">bio</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">300</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">blank</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">admin</code>을 사용하신다면 <code class="language-plaintext highlighter-rouge">admin</code>에서도 사용하기 위해 아래 처럼 내용을 작성합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="c1"># auth_test/apps/admin.py
</span>
<span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
<span class="kn">from</span> <span class="nn">django.contrib.auth.admin</span> <span class="kn">import</span> <span class="n">UserAdmin</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">MyUser</span>

<span class="n">admin</span><span class="p">.</span><span class="n">site</span><span class="p">.</span><span class="n">register</span><span class="p">(</span><span class="n">MyUser</span><span class="p">,</span> <span class="n">UserAdmin</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">migrate</code>하기 전에는 <code class="language-plaintext highlighter-rouge">pgAdmin</code>을 확인할 때 아래와 같이 되어 있었습니다.</p>

<figure class="text-center">
<span class="w-inline-block">
   <img src="/assets/images/post/django/authentication/auth08.png" alt="sample" title="sample" />
   <figcaption>pgAdmin user</figcaption>
</span>
</figure>

<h2 id="수정-결과">수정 결과</h2>

<p>특별한 데이터가 없기도 하고, 아직 커멘드라인으로 변경하는 방법을 몰라서 데이터베이스르 새로 만들고 <code class="language-plaintext highlighter-rouge">migrations</code>를 초기화했습니다.</p>

<figure class="text-center">
<span class="w-inline-block">
   <img src="/assets/images/post/django/authentication/auth09.png" alt="sample" title="sample" />
   <figcaption>makemigrations</figcaption>
</span>
</figure>

<p>데이터베이스를 새로 생성하고 migrations하고 migrate하면</p>

<figure class="text-center">
<span class="w-inline-block">
   <img src="/assets/images/post/django/authentication/auth10.png" alt="sample" title="sample" />
   <figcaption>migrate</figcaption>
</span>
</figure>

<p>뭔가 주루룩 적용했다고 합니다. <code class="language-plaintext highlighter-rouge">pgAdmin</code>에서 확인해보면 아까 <code class="language-plaintext highlighter-rouge">user</code>테이블에는 <code class="language-plaintext highlighter-rouge">auth_</code>가 붙었는데 지금은 <code class="language-plaintext highlighter-rouge">앱이름_클래스이름</code>으로 테이블이 생성되어 있습니다.</p>

<figure class="text-center">
<span class="w-inline-block">
   <img src="/assets/images/post/django/authentication/auth11.png" alt="sample" title="sample" />
   <figcaption>pgAdmin user</figcaption>
</span>
</figure>

<p>아까 추가했던 <code class="language-plaintext highlighter-rouge">bio</code>필드가 잘 들어갔습니다. 다른 방법을 아직 써보지 못해서 비교는 못하겠습니다만, 확장해서 사용하는 방식이 매우 단순해서 개인적으로는 손쉽게 적용가능한 방법이라 생각합니다. 단, 프로젝트를 시작하기 전에 하면 사용하면 좋을 것 같습니다.</p>

<p>이렇게 <code class="language-plaintext highlighter-rouge">bio</code>외에도 여러 필드를 추가해서 프로필 사진이나 주소지 등을 제어할 수 있게 되었습니다.</p>

<figure class="text-center">
<span class="w-inline-block">
   <img src="/assets/images/post/django/authentication/auth12.png" alt="sample" title="sample" />
   <figcaption>pgAdmin user</figcaption>
</span>
</figure>

<p>위 이미지에 추가된 <code class="language-plaintext highlighter-rouge">bio</code>는 회원가입 폼을 <code class="language-plaintext highlighter-rouge">UserCreationForm</code>을 상속받아 <code class="language-plaintext highlighter-rouge">LoginForm</code>이라는 이름으로 따로 커스터마이징 했기 때문에 지정된 내용이 없이 출력 되었습니다.</p>

<p>앞서 말한 <code class="language-plaintext highlighter-rouge">AbstractUser</code>로 <code class="language-plaintext highlighter-rouge">User</code>클래스를 확장하는 부분은 다 보았습니다. 다음에는 <code class="language-plaintext highlighter-rouge">Authentication</code>에서 기본적으로 적용되는 <code class="language-plaintext highlighter-rouge">Validator</code>를 커스터마이징하고 필요에 따라 기능을 <code class="language-plaintext highlighter-rouge">활성</code>/<code class="language-plaintext highlighter-rouge">비활성</code> 시키는 내용을 정리하겠습니다.</p>

<hr />

<p>📚 함께 보면 좋은 내용</p>

<p><a href="https://docs.djangoproject.com/en/dev/topics/auth/customizing/#auth-custom-user" target="_blank">Django::Customizing authentication in Django</a></p>

<p><a href="https://yuda.dev/216" target="_blank">Yuda110님::[Django] Django 마이그레이션 초기화하기</a></p>

<p><a href="https://www.programcreek.com/python/example/64448/django.contrib.auth.forms.AuthenticationForm" target="_blank">programcreek :: Python django.contrib.auth.forms.AuthenticationForm() Examples</a></p>
:ET