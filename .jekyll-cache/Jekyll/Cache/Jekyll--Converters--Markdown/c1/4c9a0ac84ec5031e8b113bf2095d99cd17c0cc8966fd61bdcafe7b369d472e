I"ɚ<h1 id="깔끔한-코드는-무엇일까">깔끔한 코드는 무엇일까</h1>

<p>설계사무소에 다닐 때 자주 하던 말이 있었습니다. 도면을 정말 군더더기 없이 잘 그렸을 때 도면에서 빛이 난다고 자주 표현합니다.</p>

<p>파일관리, 선 정리, 정치수로 자리 잡은 텍스트들, 누가봐도 알아보는 레이어정리 등이 ‘빛나는 도면’의 조건인 셈입니다.</p>

<p>그러면 프로그래밍에서 깔끔한 코드는 무엇일까요? 아직 실무를 경험하지도 못했지만 감히 얕은 지식으로 방법론을 알아보고자 합니다.</p>

<h2 id="왜-주석을-달고-있을까">왜 주석을 달고 있을까</h2>

<p>유명한 생활코딩의 이고잉님 강좌로 프로그래밍을 시작했습니다. 적절한 이론과 실습, 무엇보다도 스스로 찾아서 해결해야한다는 강조를 아직까지 잊지 않고 있습니다.</p>

<p>그때는 아무것도 모르는 시기였기에 기능 구현에만 오로지 몰두하던 시기였습니다. 그러면서 주석을 많이 달게 되었습니다. 제가 쓴 코드에 이해한 내용을 정리하던 식이었습니다.</p>

<p>주석은 명확히 기능이나 내용을 알리고자 요약하는 것인데 아이러니하게도 주석이 있는 코드는 그만큼 설명하지 않으면 이해하기 어렵다는 뜻으로 반증됩니다.</p>

<p>그렇다고해서 극단적으로 주석에 연연하여 안 넣겠다 하면 오히려 주석을 달지 않는 방법을 생각하는 시간이 길어질 것 같아 주석을 최소한으로 해야겠다는 규칙을 따르고 있습니다.</p>

<p>그래서이지 현재와 과거의 실수로부터 코딩하는 규칙을 하나씩 정하고 있습니다.</p>

<h2 id="과거의-코드">과거의 코드</h2>

<p>기능을 구현하는데에만 초점을 두다보니 어떤 변수가 몇 개 있어야하고, 어떤 함수가 있어야하면 무엇을 리턴하는지 안중에 없었습니다.</p>

<p>단지 기능이 작동되는지, 코딩 중에 변수가 바뀌면 해당 값을 모두 바꾸는 중노동을 하기도 했습니다. 마치 for문을 만번 돌려야하는데 수동으로 만번을 치는 느낌이었습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">target</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">#target</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">inValue</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span>
	<span class="nx">target</span><span class="p">.</span><span class="nx">value</span> <span class="o">+=</span> <span class="nx">a</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">outTargetVal</span><span class="p">(){</span>
	<span class="nx">target</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">testbtn</span> <span class="p">...</span>
<span class="c1">// ...</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>위의 코드는 예전에 계산기를 만들때 썼던 코드 일부입니다.</p>

<p>현재도 그렇지만 이전 코드를 보면 굉장히 많은 중복된 코드와 알수없는 네이밍들이 많았습니다. 즉흥적으로 변수를 만들어 쓰고, 위치 또한 정리가 되어있지 않아 나중에는 제가봐도 모를 지경인 코드가 많았습니다.</p>

<h1 id="코드에-규칙이-있을까">코드에 규칙이 있을까</h1>

<p>설계도면을 깔끔하게 그린다는 것은 중복선 정리와 딱 떨어지는 정치수, 통일성 있는 주석과 레이어 등이 갖추어졌을때를 말합니다. 가끔 우스게 소리로 도면에서 빛이난다고 합니다.</p>

<p>그렇다면 코드가 깔끔하다는 것은 무엇일까요. 이전에 깔끔한 코드를 좋아한다는 사람을 본 적이 있습니다. 무엇이 깔끔한지는 아직 모를 일입니다.</p>

<p>하지만 여러 사이트를 보면서 다양한 효과와 기능을 따라하고 코드를 보다보니 조금의 가닥이 잡히는 느낌이 들었습니다.</p>

<p>이런 이해가 모이다 보니 세 가지 저만의 규칙이 생기기 시작했습니다.</p>

<ul>
  <li>보기쉬운 00</li>
  <li>조립가능한 00</li>
  <li>반환하는 00</li>
</ul>

<h2 id="보기쉬운">보기쉬운</h2>

<p>‘코딩 팁’으로만 검색해도 수십에서 수백가지의 글이 나옵니다. 그 중에 자주 나오는 말이 가독성입니다. 그에 따라 나오는 것이 주석에 대한 이야기이고, 설명하기 위한 것이 주석인데 주석이 있으면 그만큼 설명이 필요한 복잡한 코드라는 반증이 되어버립니다.</p>

<p>하지만 코드가 복잡하지 않다고해서 주석을 배제하는 것도 아이러니한 상황이 될 것 같습니다.</p>

<p>주석을 없앤다는 말이 아닌 최소한으로 한다는 이야기가 아닌가 생각해봅니다.</p>

<h2 id="조립가능한">조립가능한</h2>

<p>설계에서 주로 소스를 많이 가져다 씁니다. 나무, 사람, 픽토그램(아이콘), 레이아웃 등 여러 종류의 소스가 넘쳐나고, 필요에 따라 직접 만들어 사용하기도 합니다.</p>

<p>건축물의 내부를 구성하는 것에도 방법론이 있고, 실의 용도에 따른 조건과 제한사항이 존재합니다. 그래서 주로 공유공간을 중심으로 개인공간들이 뻗어나가며 조합이됩니다.</p>

<p>특히나 아파트의 경우 2호 조합, 5호 조합 등의 말이 있는데요. 이러한 조합은 미리 계획된 루틴으로 조립하여 매스, 입면디자인을 하게 됩니다.</p>

<h2 id="반환하는">반환하는</h2>

<p>서버측과 클라이언트측 언어를 공부하면서 느끼는 점은 내장 함수들이 리턴 값을 가지고 있으며, 해당 기능에 대한 패턴이 존재한다는 것입니다.<br />
예를 들어 배열의 경우 push를 하게되면 push된 갯수를 반환하고, pop을 하게되면 제거된 것을 문자열로 반환합니다.</p>

<p>이를 통해서 리턴 값을 잘 사용하면 불필요한 변수를 쓰지 않을 수 있고, 기본적인 CRUD 기능만 구현해도 다른 기능을 가진 메서드를 만들어 낼 수 있다는 생각입니다.</p>

<p>이 개념을 토대로 코드 또한 적용될 수 있는 개념이라 생각을 했습니다.</p>

<p>예를 들면서 규칙을 정리하겠습니다.</p>

<h1 id="코드">코드</h1>

<h3 id="개요">개요</h3>

<blockquote>
  <p>템플릿 객체는 태그ID와 설정 값을 받습니다. 입력받은 데이터를 화면에 출력하고 조립가능하게 만들고자 합니다.
이때 메서드들은 하나의 기능씩 수행하게 됩니다.</p>
</blockquote>

<h3 id="기능-설정">기능 설정</h3>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">type</code>은 변수의 타입입니다.<br />
<code class="language-plaintext highlighter-rouge">&gt;&gt; type</code>은 리턴 값입니다.</p>
</blockquote>

<h4 id="templateid-options"><strong>Template</strong>(id, {options})</h4>

<ul>
  <li><strong>node</strong> : 노드의 아이디 : <code class="language-plaintext highlighter-rouge">string</code></li>
  <li><strong>storage</strong> : 저장소 : <code class="language-plaintext highlighter-rouge">array</code></li>
  <li><strong>options</strong> : 옵션(Map) : <code class="language-plaintext highlighter-rouge">map</code>
    <ul>
      <li>type</li>
      <li>…</li>
    </ul>
  </li>
  <li><strong><em>validTagId</em></strong>() : 노드아이디 검증 : <code class="language-plaintext highlighter-rouge">&gt;&gt; boolean</code></li>
  <li><strong><em>theme</em></strong>() : type에 따른 출력 포멧 변환 : <code class="language-plaintext highlighter-rouge">&gt;&gt; string</code></li>
  <li><strong><em>writeContents</em></strong>() : id에 내용 출력 : <code class="language-plaintext highlighter-rouge">&gt;&gt; void</code></li>
  <li><strong><em>addContents</em></strong>(…content) : 내용 추가 : <code class="language-plaintext highlighter-rouge">&gt;&gt; void</code></li>
  <li><strong><em>getContents</em></strong>() : 내용 읽기 : <code class="language-plaintext highlighter-rouge">&gt;&gt; array</code></li>
  <li><strong><em>getCount</em></strong>() : 내용 개수 : <code class="language-plaintext highlighter-rouge">&gt;&gt; int</code></li>
  <li><strong><em>remove</em></strong>(content) : 내용 삭제 : <code class="language-plaintext highlighter-rouge">&gt;&gt; string</code></li>
  <li><strong><em>find</em></strong>(content) : 내용 순번 확인 : <code class="language-plaintext highlighter-rouge">&gt;&gt; int</code></li>
  <li><strong><em>isContain</em></strong>(content) : 내용 포함 여부 : <code class="language-plaintext highlighter-rouge">&gt;&gt; boolean</code></li>
</ul>

<blockquote>
  <p><strong>Point</strong></p>

  <ol>
    <li>구현하고자 하는 기능에 대해 열거해본다. (계산기 : 입력, 출력, 연산 …)</li>
    <li>변수와 메서드의 이름은 최대한 간결하고 쉬운 말로 정한다.</li>
    <li>메서드는 동사로, 변수는 명사로 네이밍한다.</li>
  </ol>
</blockquote>

<p>아주 간단하게 템플릿을 입혀주는 기능을 구현해봅시다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
</pre></td><td class="rouge-code"><pre><span class="kd">function</span> <span class="nx">Template</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">options</span><span class="p">,</span> <span class="p">...</span><span class="nx">content</span><span class="p">){</span>
	<span class="c1">// 태그아이디 적합여부 검사</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">validNode</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="k">try</span><span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">id</span> <span class="o">==</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">id</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
                <span class="k">try</span><span class="p">{</span>
                    <span class="k">if</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">`#</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">)){</span>
                        <span class="k">return</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">`#</span><span class="p">${</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                        <span class="k">throw</span> <span class="dl">'</span><span class="s1">[Template] Info : 노드가 존재하지 않아 기본 타겟으로 설정됩니다. (id: wrap)</span><span class="dl">'</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="dl">'</span><span class="s1">[Template] Error : 최소 1자리 이상 문자가 입력되어야 합니다.</span><span class="dl">'</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">ex</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">ex</span><span class="p">)</span>
        <span class="p">}</span>
	<span class="p">}</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">node</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">validNode</span><span class="p">();</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">storage</span> <span class="o">=</span> <span class="nx">contents</span> <span class="k">instanceof</span> <span class="nb">Array</span> <span class="o">&amp;&amp;</span> <span class="nx">contents</span> <span class="k">instanceof</span> <span class="nb">Object</span><span class="p">?</span><span class="nx">contents</span><span class="p">:[];</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">options</span> <span class="o">=</span> <span class="o">!</span><span class="p">(</span><span class="nx">options</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">options</span> <span class="k">instanceof</span> <span class="nb">Object</span><span class="p">?</span><span class="nx">options</span><span class="p">:{};</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">theme</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">content</span><span class="p">){</span>
        <span class="k">switch</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">type</span><span class="p">){</span>
            <span class="k">case</span> <span class="dl">'</span><span class="s1">card</span><span class="dl">'</span><span class="p">:</span>
                <span class="k">return</span> <span class="o">=</span> <span class="s2">`&lt;div&gt;
                    &lt;h2&gt;Card&lt;/h2&gt;
                    &lt;span&gt;</span><span class="p">${</span><span class="nx">content</span><span class="p">}</span><span class="s2">&lt;/span&gt;
                &lt;/div&gt;`</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

	<span class="c1">// 화면에 내용출력</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">writeContents</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="k">of</span> <span class="k">this</span><span class="p">.</span><span class="nx">getContents</span><span class="p">()){</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="k">this</span><span class="p">.</span><span class="nx">theme</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
        <span class="p">}</span>
	<span class="p">}</span>

<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p><strong>Point</strong></p>

  <ol>
    <li>메서드 하나당 하나의 기능만을 수행</li>
    <li>초기에 반환타입을 설정하여 아직 구현되지 않은 메서드를 이용해 함수 구성 가능</li>
  </ol>
</blockquote>

<p>theme 메서드는 타입 설정에 따라 출력 포멧을 바꿔주는 기능입니다.<br />
validNode 메서드는 id값을 존재여부와 데이터타입을 검사하는 기능입니다.
writeContents 메서드는 getContents(Array)를 하나씩 출력하는 기능입니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="rouge-code"><pre><span class="cm">/**
 * 변수, 메서드 정의...
 */</span>

<span class="c1">// 내용 추가</span>
<span class="k">this</span><span class="p">.</span><span class="nx">addContents</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(...</span><span class="nx">contents</span><span class="p">){</span>
	<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">content</span> <span class="k">of</span> <span class="nx">contents</span><span class="p">){</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">storage</span> <span class="o">+=</span> <span class="nx">content</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
    
<span class="c1">// 내용 읽기</span>
<span class="k">this</span><span class="p">.</span><span class="nx">getContents</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
	<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">storage</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 내용 갯수</span>
<span class="k">this</span><span class="p">.</span><span class="nx">getCount</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
	<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">storage</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 내용 삭제</span>
<span class="k">this</span><span class="p">.</span><span class="nx">remove</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">content</span><span class="p">){</span>
	<span class="kd">let</span> <span class="nx">bool</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">storage</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">storage</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">i</span><span class="o">=&gt;</span><span class="p">{</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">!=</span><span class="nx">content</span><span class="p">){</span>
			<span class="k">return</span> <span class="nx">i</span><span class="p">;</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="nx">bool</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">});</span>
	<span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">storage</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">&amp;&amp;</span> <span class="nx">bool</span><span class="p">){</span>
		<span class="k">return</span> <span class="nx">content</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p><strong>Point</strong></p>

  <ol>
    <li>crud기능을 만들어두면 메서드를 조합하여 다른 기능을 쉽게 만들 수 있다.</li>
    <li>리턴 값은 다른 메서드 데이터 가공 형식을 고려하여 타입을 선정한다.</li>
  </ol>
</blockquote>

<p>만일 위의 예제와 달리 storage를 문자열로, getContent 리턴타입을 동일한 문자열로 했다면 getCount메서드 작성시 새로운 count변수를 만들거나 다른 내장 메서드를 써서 데이터 가공하는데 코드가 복잡해질 것입니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="k">this</span><span class="p">.</span><span class="nx">find</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">content</span><span class="p">){</span>
	<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">storage</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">content</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">this</span><span class="p">.</span><span class="nx">isContain</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">content</span><span class="p">){</span>
	<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="k">of</span> <span class="k">this</span><span class="p">.</span><span class="nx">storage</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">==</span><span class="nx">content</span><span class="p">){</span>
			<span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>마지막 메서드까지 모두 구현했습니다. 이제 작동 결과를 아래에서 확인하여 처음에 계획한데로 작동되는지 보겠습니다.</p>

<blockquote>
  <p>아래 결과를 참고해주세요.</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="rouge-code"><pre><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Template</span><span class="p">(</span><span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">,{</span> <span class="c1">// id test가 존재하면 test로 지정됩니다.</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">card</span><span class="dl">'</span>
<span class="p">});</span>

<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Template</span><span class="p">(</span><span class="dl">'</span><span class="s1">test2</span><span class="dl">'</span><span class="p">,{</span> <span class="c1">// id test2가 없어 기본 id wrap으로 지정됩니다.</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">card</span><span class="dl">'</span>
<span class="p">},</span> <span class="dl">'</span><span class="s1">memo</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">toto</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">mimi</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">let</span> <span class="nx">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Template</span><span class="p">(</span><span class="kc">null</span><span class="p">,{</span> <span class="c1">// null값은 valid에 검열되어 타겟이 생성되지 않습니다.</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">card</span><span class="dl">'</span>
<span class="p">},</span> <span class="dl">'</span><span class="s1">giri</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">tomy</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">wow</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">node</span><span class="p">);</span> <span class="c1">// &lt;div id="test"&gt;&lt;/div&gt;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">node</span><span class="p">);</span> <span class="c1">// &lt;div id="wrap"&gt;&lt;/div&gt;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">node</span><span class="p">);</span> <span class="c1">// ''</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">getCount</span><span class="p">());</span> <span class="c1">// 0</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">getCount</span><span class="p">());</span> <span class="c1">// 3</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">getCount</span><span class="p">());</span> <span class="c1">// 3</span>

<span class="nx">a</span><span class="p">.</span><span class="nx">addContents</span><span class="p">(</span><span class="dl">"</span><span class="s2">pepe</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">moto</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">b</span><span class="p">.</span><span class="nx">addContents</span><span class="p">(</span><span class="dl">"</span><span class="s2">moru</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">kedi</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">c</span><span class="p">.</span><span class="nx">addContents</span><span class="p">(</span><span class="dl">"</span><span class="s2">koko</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">roro</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">getContents</span><span class="p">());</span> <span class="c1">// (2) ["pepe", "moto"]</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">getContents</span><span class="p">());</span> <span class="c1">// (5) ["memo", "toto", "mimi", "moru", "kedi"]</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">getContents</span><span class="p">());</span> <span class="c1">// (5) ["giri", "tomy", "wow", "koko", "roro"]</span>

<span class="nx">a</span><span class="p">.</span><span class="nx">writeContents</span><span class="p">();</span>
<span class="nx">b</span><span class="p">.</span><span class="nx">writeContents</span><span class="p">();</span>
<span class="c1">// c.writeContents(); // 타겟이 없어 에러가 납니다.</span>
<span class="c1">// Uncaught TypeError: Cannot create property 'innerHTML' on string ''</span>
<span class="c1">// at Template.writeContents (main.js:50)</span>
<span class="c1">// at main.js:121</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="dl">'</span><span class="s1">moto</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// moto</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="dl">'</span><span class="s1">momo</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// undefined</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="dl">'</span><span class="s1">titi</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// undefined</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">getContents</span><span class="p">());</span> <span class="c1">// ["pepe"]</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">getContents</span><span class="p">());</span> <span class="c1">// (5) ["memo", "toto", "mimi", "moru", "kedi"]</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">getContents</span><span class="p">());</span> <span class="c1">// (5) ["giri", "tomy", "wow", "koko", "roro"]</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="dl">'</span><span class="s1">pepe</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// 0</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="dl">'</span><span class="s1">moru</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// 3</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="dl">'</span><span class="s1">tomy</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// 1</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">isContain</span><span class="p">(</span><span class="dl">'</span><span class="s1">pepe</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// true</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">isContain</span><span class="p">(</span><span class="dl">'</span><span class="s1">pepe</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// false</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">isContain</span><span class="p">(</span><span class="dl">'</span><span class="s1">tomy</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// true</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<hr />

<blockquote>
  <p>기능 구현 규칙 3가지</p>
  <ul>
    <li>
      <table>
        <tbody>
          <tr>
            <td>네이밍은 간략하게 하고, 변수: 명사</td>
            <td>메서드: 동사로 구분한다.</td>
          </tr>
        </tbody>
      </table>
    </li>
    <li>가능한 하나의 메서드는 하나의 기능을 담당하게 한다.</li>
    <li>초기에 리턴값을 계획해두면 다른 기능을 추가할 때 유용하다.</li>
  </ul>
</blockquote>

<p>제가 생각한 3가지 코딩 규칙을 정리해보았습니다. 계속해서 연구해 나가야할 부분이고 얼른 실무를 경험하고 잘못 이해한 부분을 고치고 알아가고 싶습니다.</p>

<p>주요하게 알게 된 점으로는 객체든 메서드든 들어온 데이터를 보존하면서 저장시켜야 가공할때 코드가 짧아진다는 것입니다.</p>

<p>예를 들어 원본 데이터가 가공되어 저장이 되면 코드가 더 길어진다는 것입니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="rouge-code"><pre><span class="c1">// 위의 코드를 부분적으로 보겠습니다.</span>

<span class="c1">// 내용 추가 부분이 만약 원본데이터인 contents가 가공되어 저장된다면</span>
<span class="k">this</span><span class="p">.</span><span class="nx">addContents</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(...</span><span class="nx">contents</span><span class="p">){</span>
	<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">content</span> <span class="k">of</span> <span class="nx">contents</span><span class="p">){</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">storage</span> <span class="o">+=</span> <span class="k">this</span><span class="p">.</span><span class="nx">theme</span><span class="p">(</span><span class="nx">content</span><span class="p">);</span> <span class="c1">// 템플릿적용된 데이터가 저장</span>
	<span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이어서 발생하는 문제를 보겠습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="k">this</span><span class="p">.</span><span class="nx">writeContents</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span> <span class="c1">// 오히려 i만 넣으면 되는 장점이 생겼지만</span>
	<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="k">of</span> <span class="k">this</span><span class="p">.</span><span class="nx">getContents</span><span class="p">()){</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">node</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="nx">i</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 내용 갯수와 파생되는 함수들이 길어집니다.</span>
<span class="k">this</span><span class="p">.</span><span class="nx">find</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">content</span><span class="p">){</span>
	<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="k">of</span> <span class="k">this</span><span class="p">.</span><span class="nx">storage</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">content</span><span class="p">),</span> <span class="nx">i</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">content</span><span class="p">)</span><span class="o">+</span><span class="nx">content</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">==</span><span class="nx">content</span><span class="p">){</span>
			<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">storage</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">content</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>부분적인 예입니다. 건축에서는 0.1mm의 오차가 10m로 불어나는 경우가 많습니다.
한 세대의 벽두께가 0.1mm만 줄어도 전용면적이 소폭증가하고 1000세대 대규모 아파트라면 엄청난 차이가 나게 됩니다.</p>

<p>코드 또한 조금의 오차와 양을 줄인다면 이후 수정이나 유지관리면에서 좋지 않을까 하는 생각을 합니다.</p>

<p>아직 부족한게 많습니다. 여기까지 읽으셨다면 영양가 없는 글 읽어주셔서 감사합니다…</p>

<p>좀 더 지식과 실무경험을 쌓아 새로 코드 규칙에 관해 심도 있게 다루겠습니다.</p>
:ET